#pragma kernel InitializeTriangles
#pragma kernel InitializeVertices
#pragma kernel LerpVertex
#pragma kernel GetVDataFromTData
#include "Assets/CGINC/Random.cginc"
#include "Assets/CGINC/Quaternion.cginc"
#define PI 3.14159265359

struct TriangleData {
	float3 position;
	float3 velocity;
	float4 rotation;
	float crossFade;
	float wireframe;
};

struct VertexData {
	float3 position;
	float3 normal;
};

RWStructuredBuffer<TriangleData> _TData;

StructuredBuffer<VertexData> _InVData0;
StructuredBuffer<VertexData> _InVData1;
RWStructuredBuffer<VertexData> _OutVData;

StructuredBuffer<int> _ToriIndices;
StructuredBuffer<float3> _ToriVertices;
StructuredBuffer<float3> _ToriNormals;

StructuredBuffer<VertexData> _ObjectData;

uint _NumData;

Texture2D _Tex;
SamplerState _LinearRepeat;

VertexData getTriangle(float t) {
	float3 pos = float3(0.0, 0.0, 1.0);
	float3 normal = float3(0.0, 1.0, 0.0);

	pos = rotateAngleAxis(pos, float3(0.0, -1.0, 0.0), t*PI*2.0 / 3.0);

	VertexData v;
	v.position = pos;
	v.normal = normal;

	return v;
}

[numthreads(1024, 1, 1)]
void InitializeTriangles(uint id : SV_DispatchThreadID)
{
	TriangleData tData;
	tData.position = float3(sin((float)id*0.01), (float)id / _NumData, cos(id*0.01)) * 10 * (float)id / _NumData;
	tData.velocity = 0.0;
	tData.rotation = getRandomRotation(tData.position.xy);
	tData.crossFade = 0.0;
	tData.wireframe = 0.5;
	_TData[id] = tData;
}

[numthreads(1024, 1, 1)]
void InitializeVertices(uint id : SV_DispatchThreadID) {
	uint idx = id.x;
	VertexData v = getTriangle(idx);
	TriangleData t = _TData[idx / 3];

	v.position = rotateWithQuaternion(v.position, t.rotation);
	v.position += t.position;
	v.normal = rotateWithQuaternion(v.normal, t.rotation);

	_OutVData[idx] = v;
}

[numthreads(1024, 1, 1)]
void GetVDataFromTData(uint id : SV_DispatchThreadID) {
	uint idx = id.x;
	VertexData v = getTriangle(idx);
	TriangleData t = _TData[idx / 3];

	v.position = rotateWithQuaternion(v.position, t.rotation);
	v.position += t.position;
	v.normal = rotateWithQuaternion(v.normal, t.rotation);

	_OutVData[idx] = v;
}
