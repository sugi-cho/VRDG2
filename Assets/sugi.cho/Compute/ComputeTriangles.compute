#pragma kernel InitializeTriangles
#pragma kernel InitializeVertices
#pragma kernel LerpVertex
#pragma kernel SetTDataFromVData
#pragma kernel GoFall
#pragma kernel ToTriangle
#pragma kernel ToShape
#pragma kernel ToTori

#include "Assets/CGINC/Random.cginc"
#include "Assets/CGINC/Transform.cginc"
#include "Assets/CGINC/Quaternion.cginc"
#define PI 3.14159265359

struct TriangleData {
	float3 position;
	float3 velocity;
	float4 rotation;
	float crossfade;
	float wireframe;
	float life;
};

struct VertexData {
	float3 position;
	float3 normal;
};

RWStructuredBuffer<TriangleData> _TData;

StructuredBuffer<VertexData> _VData0;
StructuredBuffer<VertexData> _VData1;
RWStructuredBuffer<VertexData> _OutVData;

StructuredBuffer<int> _ToriIndices;
StructuredBuffer<float3> _ToriVertices;
StructuredBuffer<float3> _ToriNormals;

StructuredBuffer<VertexData> _ObjData;

uint _NumData;//_ObjectDataのnumIndicesが入ったり、tori.numIndices入ったり。
uint _ToriFrameCount;

Texture2D _Tex;
SamplerState _LinearRepeat;
float4 _Time;//(time,dt,life,lifetime)

VertexData getTriangle(uint idx) {
	idx = idx % 3;
	float3 pos = float3(0.0, 0.0, 1.0);
	float3 normal = float3(0.0, 1.0, 0.0);

	pos = rotateAngleAxis(pos, float3(0.0, -1.0, 0.0), (float)idx*PI*2.0 / 3.0);

	VertexData v;
	v.position = pos;
	v.normal = normal;

	return v;
}

VertexData getShape(uint idx) {
	idx = idx % _NumData;
	VertexData v = _ObjData[idx];

	return v;
}

VertexData getTori(uint idx, uint toriId) {
	idx = idx % _NumData;

	float t = 0;// fmod(toriId, _ToriFrameCont);
	float f0 = floor(t);
	float f1 = fmod(f0 + 1.0, _ToriFrameCount);
	t = frac(t);

	idx = _ToriIndices[idx];
	float3 pos = lerp(_ToriVertices[idx + _NumData * f0], _ToriVertices[idx + _NumData * f1], t);
	float3 norm = lerp(_ToriNormals[idx + _NumData * f0], _ToriNormals[idx + _NumData * f1], t);

	VertexData v;
	v.position = pos;
	v.normal = norm;

	return v;
}

[numthreads(1024, 1, 1)]
void InitializeTriangles(uint id : SV_DispatchThreadID)
{
	TriangleData tData;
	tData.position = float3(sin(id*0.01), (float)id / _NumData, cos(id*0.01)) * 10 * id / _NumData;
	tData.velocity = 0.0;
	tData.rotation = getRandomRotation(tData.position.xy);
	tData.crossfade = 0.0;
	tData.wireframe = 0.5;
	tData.life = 1.0;
	_TData[id] = tData;
}

[numthreads(1024, 1, 1)]
void InitializeVertices(uint id : SV_DispatchThreadID) {
	uint idx = id.x;
	VertexData v = getTriangle(idx);
	TriangleData t = _TData[idx / 3];

	v.position = rotateWithQuaternion(v.position, t.rotation);
	v.position += t.position;
	v.normal = rotateWithQuaternion(v.normal, t.rotation);

	_OutVData[idx] = v;
}

[numthreads(1024, 1, 1)]
void LerpVertex(uint id : SV_DispatchThreadID) {
	uint tid = id / 3;
	VertexData v0 = _VData0[id];
	VertexData v1 = _VData1[id];
	TriangleData t = _TData[tid];
	VertexData v;

	v.position = lerp(v0.position, v1.position, t.crossfade);
	v.normal = lerp(v0.normal, v1.normal, t.crossfade);
	_OutVData[id] = v;
}

[numthreads(1024, 1, 1)]
void SetVDataFromTData(uint id : SV_DispatchThreadID) {
	VertexData v = getTriangle(id);
	TriangleData t = _TData[id / 3];

	v.position = rotateWithQuaternion(v.position, t.rotation);
	v.position += t.position;
	v.normal = rotateWithQuaternion(v.normal, t.rotation);

	_OutVData[id] = v;
}

[numthreads(1024, 1, 1)]
void SetTDataFromVData(uint id : SV_DispatchThreadID) {
	uint vid0 = id * 3;
	uint vid1 = id * 3 + 1;
	uint vid2 = id * 3 + 2;
	VertexData v0 = _VData0[vid0];
	VertexData v1 = _VData0[vid1];
	VertexData v2 = _VData0[vid2];

	float3 center = (v0.position + v1.position + v2.position) / 3.0;
	float3 forward = v0.position - (v1.position + v2.position)*0.5;
	float3 right = v1.position - v2.position;
	float3 up = cross(forward, right);
	forward = normalize(forward);
	right = normalize(right);
	up = normalize(up);

	float3x3 rotMatrix = getRotateMatrix(right, up, forward);
	float4 rotation = matrix_to_quaternion(rotMatrix);

	TriangleData t = _TData[id];
	t.position = center;
	t.rotation = rotation;
	_TData[id] = t;
}


//TriangleUpdater///
[numthreads(1024, 1, 1)]
void GoFall(uint id : SV_DispatchThreadID) {
	TriangleData t = _TData[id];

	float3 pos = t.position;
	float3 vel = t.velocity;
	float4 rot = t.rotation;

	vel.y -= _Time.y;
	vel *= exp(-_Time.y);
	pos += vel * _Time.y;
	if (pos.y < 0.0)
		pos.y = 10.0;

	t.velocity = vel;
	t.position = pos;
	t.rotation = rot;
	_TData[id] = t;
}

//VertexUpdater///

[numthreads(1024, 1, 1)]
void ToTriangle(uint id : SV_DispatchThreadID) {
	VertexData v0 = _VData0[id];
	VertexData v = getTriangle(id);
	TriangleData t = _TData[id / 3];

	v.position = rotateWithQuaternion(v.position, t.rotation);
	v.position += t.position;
	v.normal = rotateWithQuaternion(v.normal, t.rotation);

	v.position = lerp(v0.position, v.position, 0.1);
	v.normal = lerp(v0.normal, v.normal, 0.1);

	_OutVData[id] = v;
}

[numthreads(1024, 1, 1)]
void ToShape(uint id : SV_DispatchThreadID) {
	uint tidx = (id / _NumData)*_NumData;
	VertexData v0 = _VData0[id];
	VertexData v = getShape(id);
	TriangleData t = _TData[tidx];

	v.position = rotateWithQuaternion(v.position, t.rotation);
	v.position += t.position;
	v.normal = rotateWithQuaternion(v.normal, t.rotation);

	v.position = lerp(v0.position, v.position, 0.1);
	v.normal = lerp(v0.normal, v.normal, 0.1);

	_OutVData[id] = v;
}

[numthreads(1024, 1, 1)]
void ToTori(uint id : SV_DispatchThreadID) {
	uint tidx = (id / _NumData)*_NumData;
	VertexData v0 = _VData0[id];
	VertexData v = getTori(id, id / _NumData);
	TriangleData t = _TData[tidx];

	v.position = rotateWithQuaternion(v.position, t.rotation);
	v.position += t.position;
	v.normal = rotateWithQuaternion(v.normal, t.rotation);

	v.position = lerp(v0.position, v.position, 0.1);
	v.normal = lerp(v0.normal, v.normal, 0.1);

	_OutVData[id] = v;
}
