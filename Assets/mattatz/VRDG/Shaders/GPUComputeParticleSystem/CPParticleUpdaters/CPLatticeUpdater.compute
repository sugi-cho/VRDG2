#pragma kernel Lattice

#define UNITY_PI 3.14159265359
#define UNITY_PI2 6.28318530718

#include "../GPUParticle.cginc"
#include "../GPUParticleComputeCommon.cginc"

#include "Assets/mattatz/Common/Shaders/Random.cginc"
#include "Assets/mattatz/Common/Shaders/Easing.cginc"

struct State {
	float3 from;
	float3 to;
	float time;
	bool flag;
};

float _DT;
float _Step;
float _Scale;

RWStructuredBuffer<State> _States;

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void Lattice (uint3 id : SV_DispatchThreadID) {
	State state = _States[id.x];

	if(state.flag) {
		Particle p = _Particles[id.x];
		float t = saturate(state.time);
		t = ease_out_expo(t);
		p.pos = lerp(state.from, state.to, t);

		if(state.time <= 1) {
			state.time += _DT * p.mass;
		} else {
			float3 dir = random_orth((float2(id.x * 0.01, state.time) + state.from.xz + state.to.xy)) * _Step * _Scale;

			state.from = p.pos;
			state.to = p.pos + dir;

			state.time = 0;
		}
		_States[id.x] = state;
		_Particles[id.x] = p;
	}

}
