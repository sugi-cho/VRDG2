#pragma kernel Construct
#pragma kernel Octree

#include "../GPUParticle.cginc"
#include "../GPUParticleComputeCommon.cginc"

#define UNITY_PI 3.14159265359
#define UNITY_PI2 6.28318530718

#include "Assets/mattatz/Common/Shaders/Math.cginc"
#include "Assets/mattatz/Common/Shaders/Random.cginc"
#include "Assets/mattatz/Common/Shaders/Easing.cginc"
#include "Assets/mattatz/Common/Shaders/Noise/SimplexNoiseGrad3D.cginc"

struct Bound {
	float3 pos;
	float3 size;
	float4x4 TRS;
	bool gravity;
};

StructuredBuffer<Bound> _Bounds;
int _BoundsCount;
RWStructuredBuffer<int> _BoundsReferences;

float _Intensity, _T;

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void Construct (uint3 id : SV_DispatchThreadID) {
	Particle p = _Particles[id.x];
	int ref = _BoundsReferences[id.x];
	Bound b = _Bounds[ref];

	float delay = saturate(nrand(float2(ref, 0)) * 0.85);

	if(ref >= 0 && _T >= delay) {
		float rem = 1.0 - delay;
		float t = (_T - delay) / rem;
		float tt = 1.0 - t;

		p.pos = lerp(p.ori, mul(b.TRS, float4(p.ori - b.pos, 1.0)).xyz + b.pos, tt);
		p.rot = lerp(float4(0, 0, 0, 1), matrix_to_quaternion(b.TRS), tt);
		p.scale = lerp(float3(0, 0, 0), float3(1, 1, 1), ease_out_expo(t));
	} else {
		p.pos = mul(b.TRS, float4(p.ori - b.pos, 1.0)).xyz + b.pos;
		p.rot = matrix_to_quaternion(b.TRS);
		p.scale = float3(0, 0, 0);
	}

	_Particles[id.x] = p;
}

bool contains (Bound b, float3 pos) {
	return (
		abs(pos.x - b.pos.x) <= b.size.x && 
		abs(pos.y - b.pos.y) <= b.size.y && 
		abs(pos.z - b.pos.z) <= b.size.z
	);
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void Octree (uint3 id : SV_DispatchThreadID) {
	Particle p = _Particles[id.x];

	int index = -1;

	for(int i = 0; i < _BoundsCount; i++) {
		Bound b = _Bounds[i];
		if(contains(b, p.ori)) {
			index = i;
			break;
		}
	}

	_BoundsReferences[id.x] = index;
}
