#pragma kernel Noise
#pragma kernel Twist

#define UNITY_PI 3.14159265359
#define UNITY_PI2 6.28318530718

#include "../GPUParticle.cginc"
#include "../GPUParticleComputeCommon.cginc"

#include "Assets/mattatz/Common/Shaders/Random.cginc"
#include "Assets/mattatz/Common/Shaders/Noise/SimplexNoiseGrad3D.cginc"

float4 _Seed;
float _Scale;
float _Intensity;
float _Power;
float _T;
float _Time, _DT;

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void Noise (uint3 id : SV_DispatchThreadID) {
	Particle p = _Particles[id.x];

	if(!p.gravity) {
		float3 origin = p.ori;
		float3 distorted = origin + snoise_grad((origin + _Seed + float3(0, _Time, 0)) * _Scale) * _Intensity;
		// p.pos = lerp(origin, distorted, _T);
		p.pos = lerp(p.pos, distorted, _DT);
	}

	_Particles[id.x] = p;
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void Twist (uint3 id : SV_DispatchThreadID) {
	Particle p = _Particles[id.x];

	float3 origin = p.ori;

	float radius = pow(length(origin.xz), _Power);
	float theta = atan2(origin.z, origin.x);
	float s = origin.y;
	theta += s * _Intensity;

	float3 distorted = float3(
		radius * cos(theta),
		origin.y,
		radius * sin(theta)
	);

	p.pos = lerp(origin, distorted, _T);

	_Particles[id.x] = p;
}
