#pragma kernel Emit

#include "../GPUParticle.cginc"
#include "../GPUParticleComputeCommon.cginc"

#define UNITY_PI 3.14159265359
#define UNITY_PI2 6.28318530718

#include "Assets/mattatz/Common/Shaders/Math.cginc"
#include "Assets/mattatz/Common/Shaders/Random.cginc"

float3 _Force;
float4 _Seed;
float _DT;
float3 _EmissionCenter, _EmissionSize;

Particle init(Particle p) {
	p.lifetime = 0;

	float3 hsize = _EmissionSize * 0.5;

	p.pos = _EmissionCenter + _EmissionSize * float3(nrand(p.ori.xy, _Seed.x), nrand(p.ori.yz, _Seed.y), nrand(p.ori.xz, _Seed.z)) - hsize;

	p.rot = rotate_angle_axis(nrand(p.ori.yz + _Seed.z), random_point_on_sphere(p.ori.xy + _Seed.xy));

	return p;
}

[numthreads(THREAD_X, THREAD_Y, THREAD_Z)]
void Emit (uint3 id : SV_DispatchThreadID) {
	Particle p = _Particles[id.x];

	p.acc += _Force;
	p.lifetime += (p.mass * _DT);
	p.gravity = true;

	if(p.lifetime > 1.0) {
		p = init(p);
	}

	_Particles[id.x] = p;
}
